[meta]
site_url = "https://jayqi.github.io/python-tools-reference/"

[sections]
[sections.intro]
text = """
    This website is reference on how various popular Python tools cover different functionalities
    involved in Python development. The goal is to help you understand the different layers of
    functionality that you may need, and how the various tools cover them. Opinions about the tools
    are generally not provided.

    Some common questions:

    - [What's up with Python vs. Conda packages and environments?](#whats-up-with-python-vs-conda)
    - [When do I need these different functionalities?](#when-do-i-need-these-different-functionalities)

"""
[sections.python_vs_conda]
text = """
    **Python packages** are distributable archives of Python code. Even if a Python package
    includes code in another language, like C++ or Rust, the package would have Python "bindings"
    that allow that code to be called from Python. **Virtual environments** are isolated and
    independent sets of installed software, and it's a best practice to have a virtual environment
    per project. **Python environments** then refers to virtual environments for Python packages.

    On the other hand, **Conda packages** are distributable archives of software in any language.
    They could include Python libraries, but system libraries, R libraries, Julia libraries, and
    other executable programs are also often distributed as Conda packages. **Conda environments**
    are accordingly virtual environments for Conda packages. However, Python has a special level of
    support in the Conda ecosystem, and you can actually use
    [pip to install Python packages](https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-pkgs.html)
    into a Conda environment as if it were a Python virtual environment. Those Python packages will
    be available in the Conda environment alongside any Conda packages.

    **Which kind of package ecosystem should I use?**

    - If you are working with exclusively Python packages, you will likely have a better experience
    using Python virtual environments and Python package tools. The experience will be simpler,
    and you'll be able to install packages more quickly and easily.
    - However, if you are likely to need software in other languages, or if your
    Python dependencies have dependencies on system-level libraries, then Conda can be useful for
    handling everything together. This is can be common in scientific computing, data science,
    machine learning, and geospatial data analysis.
"""

[functionalities]
[functionalities.managing_python]
name = "Managing Python installations"
description = """
    Installs multiple versions of Python, and provides ways to switch between them on a global or
    per-project basis.
"""
[functionalities.creating_a_virtual_env]
name = "Creating a virtual environment"
description = """
    Can create a virtual environment, i.e., a specific Python interpreter and an isolated set of
    installed Python packages. Typically, a Python project uses at least one virtual environment.
    This may be a standalone virtual environment stored in a central location, or it may be inside
    a project directory and tied to that project. There are two kinds of virtual environments
    relevant to Python development: regular Python virtual environments; and Conda environments
    which can include other non-Python software packages.
"""
[functionalities.managing_dependencies]
name = "Managing dependencies"
description = """
    Provides a way to declare project dependencies and install them into a virtual environment.
"""
[functionalities.automating_virtual_envs]
name = "Automation of multiple virtual environments"
description = """
    Automation for creation, dependency management, and task invocation for multiple virtual
    environments for a single project. This is often used to manage separate environments for
    tests, documentation generation, linting, and other tasks. Such tools often let you create
    virtual environments from a matrix of parameters.
"""
[functionalities.writing_lock_files]
name = "Writing lock files"
description = """
    Lock files specify the exact set of packages installed in an environment with exact versions.
    They allow for reproducing that environment. This is most commonly useful if you are developing
    software that will be deployed, like an application or data pipeline. It's less relevant if you
    are developing a library.
"""
[functionalities.building_packages]
name = "Building packages"
description = """
    Creating file archives of Python code that can be distributed and installed by other users.
    There are two kinds of packages common for Python: regular Python packages distributed on PyPI,
    and Conda packages which can be code in any language but often is used with Python.
"""
[functionalities.publishing_packages]
name = "Publishing packages"
description = """
    Publishing Python packages to PyPI or Conda packages to conda-forge.
"""

[scenarios]
[scenarios.library_development]
name = "Library development"
description = ""
functionalities = [
    "managing_python",
    "creating_a_virtual_env",
    "managing_dependencies",
    "automating_virtual_envs",
    "building_packages",
    "publishing_packages",
]
[scenarios.application_development]
name = "Application development"
description = ""
functionalities = [
    "managing_python",
    "creating_a_virtual_env",
    "managing_dependencies",
    "writing_lock_files",
]
[scenarios.data_science_project]
name = "Data science project"
description = ""
functionalities = [
    "managing_python",
    "creating_a_virtual_env",
    "managing_dependencies",
    "writing_lock_files",
]

[[tools]]
name = "pyenv"
website = "https://github.com/pyenv/pyenv"
github = "pyenv/pyenv"
description = """
    pyenv is a tool that installs multiple versions of Python and lets you switch between them.
"""
[[tools.functionalities.managing_python]]
explanation = """
    pyenv has an `pyenv install` command for installing Python versions, a `pyenv global` command
    for setting a global Python version, and a `pyenv local` command for setting a per-project
    Python version.
"""
reference = "https://github.com/pyenv/pyenv#what-pyenv-does"

[[tools]]
name = "asdf"
github = "asdf-vm/asdf"
website = "https://asdf-vm.com/"
description = """
    asdf is a tool for managing multiple versions of many language runtimes. It supports managing
    Python through the asdf-python plugin.
"""
[[tools.functionalities.managing_python]]
explanation = """
    asdf with the asdf-python plugin has an `asdf install python` command for installing Python
    versions, a `asdf global python` command for setting a global Python version, and a
    `asdf local python` command for setting a per-project Python version.
"""
reference = "https://github.com/asdf-community/asdf-python"

[[tools]]
name = "mise"
github = "jdx/mise"
website = "https://github.com/jdx/mise"
description = """
    mise (formerly rtx) is a tool for managing multiple versions of many language runtimes,
    including Python. It started out as a clone of asdf implemented in Rust.
"""
[[tools.functionalities.managing_python]]
explanation = """
    mise has an `mise install python@<version>` command for installing Python versions and a
    `mise use python@<version>` command for setting an active Python version.
"""
reference = "https://github.com/jdx/mise/blob/main/docs/python.md"

[[tools]]
name = "venv"
website = "https://docs.python.org/3/library/venv.html"
description = "A Python standard library module for creating Python virtual environments."
[[tools.functionalities.creating_a_virtual_env]]
explanation = "The venv module lets you create a virtual environment with `python -m venv`."
reference = "https://docs.python.org/3/library/venv.html#creating-virtual-environments"
icon = "python"

[[tools]]
name = "virtualenv"
github = "pypa/virtualenv"
website = "https://virtualenv.pypa.io/en/latest/"
description = """
    virtualenv is a tool for creating Python virtual environments. It has more functionality than
    the standard library venv module, such as creating virtual environments for any installed 
    Python interpreter/version.
"""
[[tools.functionalities.creating_a_virtual_env]]
explanation = "You can create a virtual environment with `virtualenv <envname>`."
reference = "https://virtualenv.pypa.io/en/latest/user_guide.html"
icon = "python"

[[tools]]
name = "pip"
github = "pypa/pip"
website = "https://pip.pypa.io/en/stable/"
description = """
    Pip is the standard package installer for Python. Python installations generally come with pip
    pre-installed.
"""
[[tools.functionalities.managing_dependencies]]
explanation = """
    Pip has an `pip install` command for installing packages, either from a local distribution or
    from PyPI. It also has a `requirements.txt` requirements file specification that it can read
    and install from.
"""
reference = "https://pip.pypa.io/en/stable/getting-started/"
icon = "python"

[[tools]]
name = "uv"
github = "astral/uv"
website = "https://github.com/astral-sh/uv"
description = """
    uv is a fast Python installer and resolver designed to be a drop-in replacement for pip,
    pip-compile, and virtualenv.
"""
[[tools.functionalities.creating_a_virtual_env]]
explanation = "FILL ME IN"
reference = "https://github.com/astral-sh/uv?tab=readme-ov-file#getting-started"
icon = "python"
[[tools.functionalities.managing_dependencies]]
explanation = "FILL ME IN"
reference = "https://github.com/astral-sh/uv?tab=readme-ov-file#getting-started"
icon = "python"
[[tools.functionalities.writing_lock_files]]
explanation = "FILL ME IN"
reference = "https://github.com/astral-sh/uv?tab=readme-ov-file#getting-started"
icon = "python"

[[tools]]
name = "conda"
github = "conda/conda"
website = "https://docs.conda.io/en/latest/"
description = """
    Conda is a cross-platform package and virtual environment manager. Conda packages can include
    libraries or executables in any language.
"""
[[tools.functionalities.managing_python]]
explanation = """
    Conda treats Python like any other conda package, and it allows you to install any version of
    Python as an isolated Python runtime in conda environment. To use that instance of Python, you
    will need to either activate the environment or use `conda run -n <envname>`.
"""
reference = "https://docs.conda.io/projects/conda/en/stable/user-guide/getting-started.html#managing-python"
[[tools.functionalities.creating_a_virtual_env]]
explanation = """
    Conda allows you to create conda environments using the `conda create -n <envname>` command.
"""
reference = "https://docs.conda.io/projects/conda/en/stable/user-guide/getting-started.html#managing-envs"
icon = "conda"
[[tools.functionalities.managing_dependencies]]
explanation = """
    Conda has a `environment.yml` file specification for specifying dependencies to install into
    an environment.
"""
reference = "https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html"
icon = "python"
[[tools.functionalities.managing_dependencies]]
explanation = """
    Conda has a `environment.yml` file specification for specifying dependencies to install into
    an environment. In it, you can have a subsection under `pip` for Python package dependencies.
"""
reference = "https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#creating-an-environment-file-manually"
icon = "conda"

[[tools]]
name = "mamba"
github = "mamba-org/mamba"
website = "https://mamba.readthedocs.io/en/stable/user_guide/mamba.html"
description = "Mamba is a faster drop-in replacement for the conda package manager."
[[tools.functionalities.managing_python]]
explanation = """
    As a drop-in replacement for conda, mamba can manage Python installations, which are treated
    like any other conda package.
"""
reference = "https://mamba.readthedocs.io/en/latest/user_guide/mamba.html#quickstart"
[[tools.functionalities.creating_a_virtual_env]]
explanation = "FILL ME IN"
reference = "https://mamba.readthedocs.io/en/latest/user_guide/mamba.html#quickstart"
icon = "conda"
[[tools.functionalities.managing_dependencies]]
explanation = "FILL ME IN"
reference = "https://mamba.readthedocs.io/en/latest/user_guide/mamba.html#quickstart"
icon = "python"
[[tools.functionalities.managing_dependencies]]
explanation = "FILL ME IN"
reference = "https://mamba.readthedocs.io/en/latest/user_guide/mamba.html#quickstart"
icon = "conda"

[[tools]]
name = "tox"
github = "tox-dev/tox"
website = "https://tox.wiki/en/stable/"
description = """
    tox is a tool for automated testing in multiple virtual environments. You can configure
    environments using an INI-format configuration file, and it provides CLI commands to easily
    run tasks in those environments.
"""
[[tools.functionalities.automating_virtual_envs]]
explanation = "tox allows you to configure environments using a `tox.ini` configuration file."
reference = "https://tox.wiki/en/stable/user_guide.html"
[[tools.functionalities.automating_virtual_envs]]
explanation = """
    tox supports integration with conda environments and packages with the tox-conda plugin.
"""
reference = "https://github.com/tox-dev/tox-conda"
icon = "conda"

[[tools]]
name = "Nox"
github = "wntrblm/nox"
website = "https://nox.thea.codes/en/stable/"
description = """
    Nox is a tool for automated testing in multiple virtual environments similar to tox. Unlike
    tox, Nox uses a Python script for configuration rather than an INI file.
"""
[[tools.functionalities.automating_virtual_envs]]
explanation = """
    Nox can use venv or virtualenv as a virtual environment backend. This will create Python
    environments, and it allows you to script Python package installations with pip.
"""
reference = "https://nox.thea.codes/en/stable/config.html#defining-sessions"
icon = "python"
[[tools.functionalities.automating_virtual_envs]]
explanation = """
    Nox allows you to use conda or mamba as a virtual environment backend. This will create conda
    environments and allows you to install conda packages.
"""
reference = "https://nox.thea.codes/en/stable/config.html#configuring-a-session-s-virtualenv"
icon = "conda"

[[tools]]
name = "Pipenv"
github = "pypa/pipenv"
website = "https://pipenv.pypa.io/en/stable/"
description = """
    Pipenv is a tool for managing Python environments and dependencies for a project. It uses its
    own `Pipfile` and `Pipefile.lock` file formats for specifying and locking dependencies.
"""
[[tools.functionalities.creating_a_virtual_env]]
explanation = """
    When you use `pipenv install` for the first time in a project, it will automatically create
    a virtual environment for that project.
"""
reference = "https://pipenv.pypa.io/en/latest/installation.html#virtualenv-mapping-caveat"
icon = "python"
[[tools.functionalities.managing_dependencies]]
explanation = """
    When you use `pipenv install` to install a package, Pipenv tracks your dependencies in a file
    called `Pipfile`.
"""
reference = "https://pipenv.pypa.io/en/stable/installation/#installing-packages-for-your-project"
icon = "python"
[[tools.functionalities.writing_lock_files]]
explanation = """
    Pipenv also manages a file called `Pipfile.lock` which tracks the exact versions of packages
    installed.
"""
reference = "https://pipenv.pypa.io/en/latest/pipfile.html"
icon = "python"

[[tools]]
name = "Hatch"
github = "pypa/hatch"
website = "https://hatch.pypa.io/latest/"
description = """
    Hatch is a Python project manager with a variety of features in environment management as well
    as building and publishing packages.
"""
[[tools.functionalities.creating_a_virtual_env]]
explanation = """
    If you use Hatch's virtual environment management functionality, it will create a virtual
    environment named "default" that is the primary environment for a project.
"""
reference = "https://hatch.pypa.io/latest/environment/#creation"
icon = "python"
[[tools.functionalities.managing_dependencies]]
explanation = """
    Hatch lets you define dependencies in your project's `pyproject.toml` file. It will
    automatically install them in any virtual environments that it manages.
"""
reference = "https://hatch.pypa.io/latest/environment/#dependencies"
icon = "python"
[[tools.functionalities.automating_virtual_envs]]
explanation = """
    Hatch lets you configure multiple virtual environments in your project's `pyproject.toml` file.
    It has advanced configurability like inheritance between environments and matrices of
    parameters. Hatch will keep dependencies in environments synchronized, and provides a
    `hatch run` command for executing scripts in one or multiple environments.
"""
reference = "https://hatch.pypa.io/latest/environment/"
icon = "python"
[[tools.functionalities.building_packages]]
explanation = """
    Hatch is a build frontend, and it also comes with a build backend named Hatchling. Both are
    compliant with modern Python packaging specifications (PEP 517 and PEP 621). You can use Hatch
    to build a package with the `hatch build` command.
"""
reference = "https://hatch.pypa.io/latest/build/"
icon = "python"
[[tools.functionalities.publishing_packages]]
explanation = """
    Hatch has a `hatch publish` CLI command for publishing a package to PyPI.
"""
reference = "https://hatch.pypa.io/latest/publish/"
icon = "python"

[[tools]]
name = "Poetry"
github = "python-poetry/poetry"
website = "https://python-poetry.org/"
description = "FILL ME IN"
[[tools.functionalities.creating_a_virtual_env]]
explanation = "FILL ME IN"
reference = "https://python-poetry.org/docs/basic-usage/#using-your-virtual-environment"
icon = "python"
[[tools.functionalities.automating_virtual_envs]]
explanation = "FILL ME IN"
reference = "https://python-poetry.org/docs/managing-environments/"
icon = "python"
[[tools.functionalities.managing_dependencies]]
explanation = "FILL ME IN"
reference = "https://python-poetry.org/docs/basic-usage/#specifying-dependencies"
icon = "python"
[[tools.functionalities.writing_lock_files]]
explanation = "FILL ME IN"
reference = "https://python-poetry.org/docs/basic-usage/#installing-without-poetrylock"
[[tools.functionalities.building_packages]]
explanation = "FILL ME IN"
reference = "https://python-poetry.org/docs/libraries/#packaging"
icon = "python"
[[tools.functionalities.publishing_packages]]
explanation = "FILL ME IN"
reference = "https://python-poetry.org/docs/libraries/#publishing-to-pypi"
icon = "python"

[[tools]]
name = "PDM"
github = "pdm-project/pdm"
website = "https://pdm.fming.dev/latest/"
description = "FILL ME IN"
[[tools.functionalities.creating_a_virtual_env]]
explanation = "FILL ME IN"
reference = "https://pdm.fming.dev/latest/usage/venv/"
[[tools.functionalities.automating_virtual_envs]]
explanation = "FILL ME IN"
reference = "https://pdm.fming.dev/latest/usage/venv/"
icon = "python"
[[tools.functionalities.automating_virtual_envs]]
explanation = "FILL ME IN"
reference = "https://pdm.fming.dev/latest/usage/venv/#virtualenv-auto-creation"
icon = "conda"
[[tools.functionalities.managing_dependencies]]
explanation = "FILL ME IN"
reference = "https://pdm.fming.dev/latest/usage/dependency/"
[[tools.functionalities.building_packages]]
explanation = "FILL ME IN"
reference = "https://pdm.fming.dev/latest/usage/publish/"

[[tools]]
name = "Rye"
github = "mitsuhiko/rye"
website = "https://rye-up.com/"
description = "FILL ME IN"
[[tools.functionalities.managing_python]]
explanation = "FILL ME IN"
reference = "https://github.com/mitsuhiko/rye#some-of-the-things-it-does"
[[tools.functionalities.creating_a_virtual_env]]
explanation = "FILL ME IN"
reference = "https://rye-up.com/guide/basics/#first-sync"
[[tools.functionalities.managing_dependencies]]
explanation = "FILL ME IN"
reference = "https://rye-up.com/guide/basics/#adding-dependencies"
[[tools.functionalities.writing_lock_files]]
explanation = "FILL ME IN"
reference = "https://rye-up.com/guide/sync/"
[[tools.functionalities.building_packages]]
explanation = """
    Rye provides a `rye build` command to build packages, which uses build under the hood.
"""
reference = "https://rye-up.com/guide/publish/"
[[tools.functionalities.publishing_packages]]
explanation = """
    Rye provides a `rye publish` command to publish to PyPI, which uses twine under the hood.
"""
reference = "https://rye-up.com/guide/publish/"

[[tools]]
name = "pip-tools"
github = "jazzband/pip-tools"
website = "https://github.com/jazzband/pip-tools/"
description = """
    pip-tools is a set of command-line programs for creating a lock file for Python packages and
    for syncing a virtual environment with a lock file. It uses the `requirements.txt` format used
    by pip.
"""
[[tools.functionalities.writing_lock_files]]
explanation = """
    The `pip-compile` command generates a fully pinned lock file (fully pinned `requirements.txt`)
    from a set of abstract requirements. The `pip-sync` command synchronizes an environment with a
    lock file.
"""
reference = "https://github.com/jazzband/pip-tools/#example-usage-for-pip-compile"
icon = "python"

[[tools]]
name = "conda-lock"
github = "conda/conda-lock"
website = "https://github.com/conda/conda-lock"
description = """
    Conda-lock generates multiplatform fully reproducible lock files for conda environments.
"""
[[tools.functionalities.writing_lock_files]]
explanation = """
    Use the `conda-lock` CLI with a conda `environment.yml` file containing abstract requirements
    to generate a lock file. You can use the `conda-lock install` command to install from a lock
    file.
"""
reference = "https://github.com/conda/conda-lock#basic-usage"
icon = "conda"
[[tools.functionalities.writing_lock_files]]
explanation = """
    Conda-lock supports locking Python package dependencies installed by pip in a conda environment
    specification.
"""
reference = "https://conda.github.io/conda-lock/pip/"
icon = "python"

[[tools]]
name = "Build"
github = "pypa/build"
website = "https://pypa-build.readthedocs.io/en/stable/"
description = """
    Build is a simple build frontend implementing modern Python packaging standards (PEP 517).
"""
[[tools.functionalities.building_packages]]
explanation = """
    Use Build to build a package with `python -m build`. You will need to have a PEP 517 build
    backend specified in your `pyproject.toml` file.
"""
reference = "https://pypa-build.readthedocs.io/en/stable/index.html"

[[tools]]
name = "Twine"
github = "pypa/twine"
website = "https://twine.readthedocs.io/en/stable/"
description = "Twine is a tool for publishing Python packages to PyPA."
[[tools.functionalities.publishing_packages]]
explanation = "Twine has a `twine upload` command for publishing a built package archive."
reference = "https://twine.readthedocs.io/en/stable/"

[[tools]]
name = "Flit"
github = "pypa/flit"
website = "https://flit.pypa.io/en/stable/"
description = "Flit is a simple build tool for pure Python packages."
[[tools.functionalities.building_packages]]
explanation = """
    Flit is a build frontend, and it includes a build backend flit_core. Both are compliant with
    modern Python packaging specifications (PEP 517 and PEP 621). You can use Flit to build a
    package with the `flit build` command.
"""
reference = "https://flit.pypa.io/en/stable/index.html#usage"
icon = "python"
[[tools.functionalities.publishing_packages]]
explanation = """
    Flit has a `flit publish` command for publishing a package to PyPI.
"""
reference = "https://flit.pypa.io/en/stable/upload.html"
icon = "python"
